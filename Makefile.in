#  Top level -*- Makefile -*- for GHDL.
#  Copyright (C) 2002 - 2014 Tristan Gingold
#
#  GHDL is free software; you can redistribute it and/or modify it under
#  the terms of the GNU General Public License as published by the Free
#  Software Foundation; either version 2, or (at your option) any later
#  version.
#
#  GHDL is distributed in the hope that it will be useful, but WITHOUT ANY
#  WARRANTY; without even the implied warranty of MERCHANTABILITY or
#  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
#  for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with GCC; see the file COPYING.  If not, write to the Free
#  Software Foundation, 59 Temple Place - Suite 330, Boston, MA
#  02111-1307, USA.
CC=@CC@
build=@build@
srcdir=@srcdir@
GNATMAKE=@GNATMAKE@
prefix=@prefix@
backend=@backend@
libdirsuffix=@libdirsuffix@
libdirreverse=@libdirreverse@
gcc_src_dir=@gcc_src_dir@

INSTALL_PROGRAM=install -m 755
INSTALL_DATA=install -m 644
DESTDIR=
bindir=$(prefix)/bin
MKDIR=mkdir
LN=ln -s
CP=cp
SED=sed
GRT_RANLIB=ranlib

VHDL_LIB_DIR=$(prefix)/$(libdirsuffix)
ADAC=$(CC)

GNATFLAGS=-gnaty3befhkmr -gnatwael -aO. -g -gnatf -gnat05
GRT_FLAGS=-g
LIB_CFLAGS=-g -O2

# Optimize, do not forget to use MODE=--genfast for iirs.adb.
#GNATFLAGS+=-O -gnatn
#GRT_FLAGS+=-O

# Profiling.
#GNATFLAGS+=-pg -gnatn -O
#GRT_FLAGS+=-pg -O

# Coverage
#GNATFLAGS+=-fprofile-arcs -ftest-coverage

GNAT_BARGS=-bargs -E

target=$(build)
#target=i686-pc-linux-gnu
#target=x86_64-pc-linux-gnu
#target=i686-apple-darwin
#target=x86_64-apple-darwin
#target=i386-pc-mingw32

LLVM_CONFIG=llvm-config

all: Makefile all.$(backend)

install: install.$(backend)

check: check.$(backend)

copy-sources: copy-sources.$(backend)

Makefile: $(srcdir)/Makefile.in
	./config.status

#################### For mcode backend ##############################

all.mcode: ghdl.mcode libs.vhdl.mcode

GRTSRCDIR=$(srcdir)/src/grt
include $(GRTSRCDIR)/Makefile.inc

GHDL_MCODE_INCFLAGS=-aI$(srcdir)/src -aI$(srcdir)/src/vhdl -aI$(srcdir)/src/psl -aI$(srcdir)/src/ghdldrv -aI$(srcdir)/src/grt -aI$(srcdir)/src/vhdl/translate -aI$(srcdir)/src/ortho/mcode -aI$(srcdir)/src/ortho

ghdl.mcode: GRT_FLAGS+=-DWITH_GNAT_RUN_TIME
ghdl.mcode: $(GRT_ADD_OBJS) $(ORTHO_DEPS) memsegs_c.o chkstk.o force
	$(GNATMAKE) -o ghdl $(GHDL_MCODE_INCFLAGS) $(GNATFLAGS) ghdl_jit.adb $(GNAT_BARGS) -largs memsegs_c.o chkstk.o $(GNAT_LARGS) $(GRT_ADD_OBJS) $(subst @,$(GRTSRCDIR),$(GRT_EXTRA_LIB))

.PHONY: ghdl.mcode

memsegs_c.o: $(srcdir)/src/ortho/mcode/memsegs_c.c
	$(CC) -c -g -o $@ $<

#################### For gcc backend ##############################

gcc_vhdl_dir=$(gcc_src_dir)/gcc/vhdl

all.gcc:
	echo "For installing sources in gcc, do: make copy-sources"
	echo "Then configure gcc"

copy-sources.gcc:
	$(RM) -rf $(gcc_vhdl_dir)
	$(MKDIR) $(gcc_vhdl_dir)
	$(CP) -p $(srcdir)/src/*.ad? $(gcc_vhdl_dir)
	$(CP) -p $(srcdir)/src/vhdl/*.ad? $(gcc_vhdl_dir)
	$(CP) -p $(srcdir)/src/vhdl/translate/*.ad? $(gcc_vhdl_dir)
	$(CP) -p $(srcdir)/src/psl/*.ad? $(gcc_vhdl_dir)
	$(CP) -p $(srcdir)/src/ortho/*.ad? $(gcc_vhdl_dir)
	$(CP) -p $(srcdir)/src/ortho/gcc/*.ad? $(gcc_vhdl_dir)
	$(CP) -p $(srcdir)/src/ortho/gcc/*.c $(gcc_vhdl_dir)
	$(CP) -p $(srcdir)/src/ortho/gcc/*.opt $(gcc_vhdl_dir)
	$(CP) -p $(srcdir)/doc/ghdl.texi $(srcdir)/doc/ghdl.1 $(gcc_vhdl_dir)
	$(MKDIR) $(gcc_vhdl_dir)/grt
	$(CP) -pR $(srcdir)/src/grt/* $(gcc_vhdl_dir)/grt
	$(MKDIR) $(gcc_vhdl_dir)/libraries
	$(CP) -pR $(srcdir)/libraries/* $(gcc_vhdl_dir)/libraries
	$(MKDIR) $(gcc_vhdl_dir)/ghdldrv
	$(CP) -pR $(srcdir)/src/ghdldrv/*.ad? $(gcc_vhdl_dir)/ghdldrv
	$(CP) -p $(srcdir)/dist/gcc/Make-lang.in $(gcc_vhdl_dir)
	$(SED) \
	 -e "/^####libraries Makefile.inc/r $(srcdir)/libraries/Makefile.inc" \
	 -e "/^####grt Makefile.inc/r $(srcdir)/src/grt/Makefile.inc" \
	 < $(srcdir)/dist/gcc/Makefile.in > $(gcc_vhdl_dir)/Makefile.in
	$(CP) -p $(srcdir)/dist/gcc/Makefile.in $(gcc_vhdl_dir)
	$(CP) -p $(srcdir)/dist/gcc/config-lang.in $(gcc_vhdl_dir)
	$(CP) -p $(srcdir)/dist/gcc/lang-options.h $(gcc_vhdl_dir)
	$(CP) -p $(srcdir)/dist/gcc/lang-specs.h $(gcc_vhdl_dir)

GHDL_GCC_INCFLAGS=-aI$(srcdir)/src -aI$(srcdir)/src/vhdl -aI$(srcdir)/src/psl -aI$(srcdir)/src/vhdl/translate

ghdl1-gcc: force
	$(MAKE) -f $(srcdir)/src/ortho/gcc/Makefile \
	 ortho_srcdir=$(srcdir)/src/ortho ortho_exec=$@ \
	 GNAT_FLAGS="$(GHDL_GCC_INCFLAGS) $(GNATFLAGS)" all

ghdl_gcc: force
	$(GNATMAKE) $(GHDL_GCC_INCFLAGS) -aI$(srcdir)/src/ghdldrv \
	 $(GNATFLAGS) ghdl_gcc $(GNAT_BARGS) -largs $(GNAT_LARGS)

grt.links:
	cd $(libdirsuffix); ln -sf $(libdirreverse)/grt.lst .; ln -sf $(libdirreverse)/libgrt.a .; ln -sf $(libdirreverse)/grt.ver .

#################### For llvm backend ##############################

ghdl_llvm_jit: GRT_FLAGS+=-DWITH_GNAT_RUN_TIME
ghdl_llvm_jit: $(GRT_ADD_OBJS) $(ORTHO_DEPS) llvm-cbindings.o force
	$(GNATMAKE) -o $@ -aI../../ortho/llvm -aI../../ortho $(GNATFLAGS) ghdl_jit.adb $(GNAT_BARGS) -largs llvm-cbindings.o $(GNAT_LARGS) $(GRT_ADD_OBJS) $(subst @,$(GRTSRCDIR),$(GRT_EXTRA_LIB)) `$(LLVM_CONFIG) --ldflags --libs --system-libs` -lc++

llvm-cbindings.o: ../../ortho/llvm/llvm-cbindings.cpp
	$(CXX) -c -m64 `$(LLVM_CONFIG) --includedir --cxxflags` -g -o $@ $<

ghdl_simul: $(GRT_ADD_OBJS) force
	$(GNATMAKE) -aI../../simulate $(GNATFLAGS) ghdl_simul $(GNAT_BARGS) -largs $(GNAT_LARGS) $(GRT_ADD_OBJS) $(subst @,$(GRTSRCDIR),$(GRT_EXTRA_LIB))

ghdl_llvm: force
	$(GNATMAKE) $(GNATFLAGS) ghdl_llvm $(GNAT_BARGS) -largs $(GNAT_LARGS)

################ Libraries ###############################################

LIB87_DIR:=$(libdirsuffix)/v87
LIB93_DIR:=$(libdirsuffix)/v93
LIB08_DIR:=$(libdirsuffix)/v08

LIBSRC_DIR:=$(srcdir)/libraries
REL_DIR:=$(libdirreverse)/../..
GHDL=ghdl
ANALYZE:=$(REL_DIR)/$(GHDL) -a $(LIB_CFLAGS)

$(LIB87_DIR) $(LIB93_DIR) $(LIB08_DIR):
	[ -d $(libdirsuffix) ] || mkdir -p $(libdirsuffix)
	[ -d $@ ] || mkdir $@

include $(srcdir)/libraries/Makefile.inc

GHDL1=./ghdl1-gcc
$(LIB93_DIR)/std/std_standard.o: $(GHDL1)
ifeq ($(GHDL),ghdl_llvm)
	$(GHDL1) --std=93 -quiet $(LIB_CFLAGS)  -c -o $@ --compile-standard
else
	$(GHDL1) --std=93 -quiet $(LIB_CFLAGS)  -o std_standard.s \
	 --compile-standard
	$(CC) -c -o $@ std_standard.s
	$(RM) std_standard.s
endif

$(LIB87_DIR)/std/std_standard.o: $(GHDL1)
ifeq ($(GHDL),ghdl_llvm)
	$(GHDL1) --std=87 -quiet $(LIB_CFLAGS)  -c -o $@ --compile-standard
else
	$(GHDL1) --std=87 -quiet $(LIB_CFLAGS) -o std_standard.s \
	 --compile-standard
	$(CC) -c -o $@ std_standard.s
	$(RM) std_standard.s
endif

$(LIB08_DIR)/std/std_standard.o: $(GHDL1)
ifeq ($(GHDL),ghdl_llvm)
	$(GHDL1) --std=08 -quiet $(LIB_CFLAGS)  -c -o $@ --compile-standard
else
	$(GHDL1) --std=08 -quiet $(LIB_CFLAGS) -o std_standard.s \
	 --compile-standard
	$(CC) -c -o $@ std_standard.s
	$(RM) std_standard.s
endif

libs.vhdl.v93: std.v93 ieee.v93 synopsys.v93 mentor.v93
libs.vhdl.v87: std.v87 ieee.v87 synopsys.v87
libs.vhdl.v08: std.v08 ieee.v08
libs.vhdl.all: libs.vhdl.v87 libs.vhdl.v93 libs.vhdl.v08

libs.vhdl.standard: $(LIB93_DIR)/std/std_standard.o \
 $(LIB87_DIR)/std/std_standard.o \
 $(LIB08_DIR)/std/std_standard.o

libs.vhdl.gcc:
	$(MAKE) GHDL=ghdl_gcc libs.vhdl.all
	$(MAKE) GHDL1=./ghdl1-gcc libs.vhdl.standard

libs.vhdl.mcode: libs.vhdl.all

libs.vhdl.simul:
	$(MAKE) GHDL=ghdl_simul libs.vhdl.all

libs.vhdl.llvm:
	$(MAKE) GHDL=ghdl_llvm libs.vhdl.all
	$(MAKE) GHDL1=./ghdl1-llvm lib.vhdl.standard

install.dirs:
	[ -d $(DESTDIR)$(prefix) ] || $(MKDIR) -p $(DESTDIR)$(prefix)
	[ -d $(DESTDIR)$(bindir) ] || $(MKDIR) -p $(DESTDIR)$(bindir)

install.vhdl.srcs:
# Install VHDL sources.
	$(RM) -rf $(DESTDIR)$(VHDL_LIB_DIR)/src
	$(MKDIR) -p $(DESTDIR)$(VHDL_LIB_DIR)/src
	$(MKDIR) $(DESTDIR)$(VHDL_LIB_DIR)/src/std
	for i in $(STD93_SRCS) $(STD87_SRCS) $(STD08_SRCS); do \
	  $(INSTALL_DATA) -p $$i $(DESTDIR)$(VHDL_LIB_DIR)/src/std; \
	done
	$(MKDIR) $(DESTDIR)$(VHDL_LIB_DIR)/src/ieee
	for i in $(IEEE93_SRCS) $(IEEE87_SRCS); do \
	  $(INSTALL_DATA) -p $$i $(DESTDIR)$(VHDL_LIB_DIR)/src/ieee; \
	done
	$(MKDIR) $(DESTDIR)$(VHDL_LIB_DIR)/src/vital95
	for i in $(VITAL95_SRCS); do \
	  $(INSTALL_DATA) -p $$i $(DESTDIR)$(VHDL_LIB_DIR)/src/vital95; \
	done
	$(MKDIR) $(DESTDIR)$(VHDL_LIB_DIR)/src/vital2000
	for i in $(VITAL2000_SRCS); do \
	  $(INSTALL_DATA) -p $$i $(DESTDIR)$(VHDL_LIB_DIR)/src/vital2000; \
	done
	$(MKDIR) $(DESTDIR)$(VHDL_LIB_DIR)/src/synopsys
	for i in $(SYNOPSYS_SRCS); do \
	  $(INSTALL_DATA) -p $$i $(DESTDIR)$(VHDL_LIB_DIR)/src/synopsys; \
	done
	$(MKDIR) $(DESTDIR)$(VHDL_LIB_DIR)/src/mentor
	for i in $(MENTOR93_SRCS); do \
	  $(INSTALL_DATA) -p $$i $(DESTDIR)$(VHDL_LIB_DIR)/src/mentor; \
	done
	$(MKDIR) $(DESTDIR)$(VHDL_LIB_DIR)/src/ieee2008
	for i in $(IEEE08_SRCS); do \
	  $(INSTALL_DATA) -p $$i $(DESTDIR)$(VHDL_LIB_DIR)/src/ieee2008; \
	done

install.vhdl.mcode: install.dirs #libs.vhdl.mcode
# Copy libraries and relocate source files.
	for d in v08/ieee v08/std v87/ieee v87/std v87/synopsys \
	  v93/ieee v93/mentor v93/std v93/synopsys; do \
	  $(MKDIR) -p $(DESTDIR)$(VHDL_LIB_DIR)/$$d; \
	  $(INSTALL_DATA) -p \
	    $(libdirsuffix)/$$d/* $(DESTDIR)$(VHDL_LIB_DIR)/$$d; \
	  for c in $(libdirsuffix)/$$d/*.cf; do \
	   $(SED) -e '/file/s@".*/libraries@"../../src@g' \
	     < $$c > $(DESTDIR)$(prefix)/$$c; \
	  done; \
	done

install.program: install.dirs ghdl.mcode
	$(INSTALL_PROGRAM) ghdl $(DESTDIR)$(bindir)

install.mcode: install.program install.vhdl.srcs install.vhdl.mcode

####################### clean ############################################

clean: force
	$(RM) -f *.o *.ali b~*.ad? *~ *.d b__*.ad? *.a *.deps *.bexch
	$(RM) -f ghdl_gcc ghdl_mcode ghdl_llvm ghdl_llvm_jit ghdl_simul
	$(RM) -f ghdl1-gcc run-bind.ad? grt.lst grt-files grt-files.in
	$(RM) -rf lib

distclean: clean
	$(RM) -f default_pathes.ads ortho_code-x86-flags.ads
	$(RM) -f Makefile config.status ghdl.gpr

clean-c: force
	$(RM) -f memsegs_c.o chkstk.o linux.o times.o grt-cbinding.o grt-cvpi.o

force:

.PHONY: force clean distclean clean-c
